/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProfileImport } from './routes/profile'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as MeetupsIndexImport } from './routes/meetups/index'
import { Route as MeetupsNewMeetupImport } from './routes/meetups/new-meetup'
import { Route as MeetupsIdImport } from './routes/meetups/$id'

// Create/Update Routes

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MeetupsIndexRoute = MeetupsIndexImport.update({
  id: '/meetups/',
  path: '/meetups/',
  getParentRoute: () => rootRoute,
} as any)

const MeetupsNewMeetupRoute = MeetupsNewMeetupImport.update({
  id: '/meetups/new-meetup',
  path: '/meetups/new-meetup',
  getParentRoute: () => rootRoute,
} as any)

const MeetupsIdRoute = MeetupsIdImport.update({
  id: '/meetups/$id',
  path: '/meetups/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/meetups/$id': {
      id: '/meetups/$id'
      path: '/meetups/$id'
      fullPath: '/meetups/$id'
      preLoaderRoute: typeof MeetupsIdImport
      parentRoute: typeof rootRoute
    }
    '/meetups/new-meetup': {
      id: '/meetups/new-meetup'
      path: '/meetups/new-meetup'
      fullPath: '/meetups/new-meetup'
      preLoaderRoute: typeof MeetupsNewMeetupImport
      parentRoute: typeof rootRoute
    }
    '/meetups/': {
      id: '/meetups/'
      path: '/meetups'
      fullPath: '/meetups'
      preLoaderRoute: typeof MeetupsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/profile': typeof ProfileRoute
  '/meetups/$id': typeof MeetupsIdRoute
  '/meetups/new-meetup': typeof MeetupsNewMeetupRoute
  '/meetups': typeof MeetupsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/profile': typeof ProfileRoute
  '/meetups/$id': typeof MeetupsIdRoute
  '/meetups/new-meetup': typeof MeetupsNewMeetupRoute
  '/meetups': typeof MeetupsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/profile': typeof ProfileRoute
  '/meetups/$id': typeof MeetupsIdRoute
  '/meetups/new-meetup': typeof MeetupsNewMeetupRoute
  '/meetups/': typeof MeetupsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/profile'
    | '/meetups/$id'
    | '/meetups/new-meetup'
    | '/meetups'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/profile'
    | '/meetups/$id'
    | '/meetups/new-meetup'
    | '/meetups'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/profile'
    | '/meetups/$id'
    | '/meetups/new-meetup'
    | '/meetups/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  ProfileRoute: typeof ProfileRoute
  MeetupsIdRoute: typeof MeetupsIdRoute
  MeetupsNewMeetupRoute: typeof MeetupsNewMeetupRoute
  MeetupsIndexRoute: typeof MeetupsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  ProfileRoute: ProfileRoute,
  MeetupsIdRoute: MeetupsIdRoute,
  MeetupsNewMeetupRoute: MeetupsNewMeetupRoute,
  MeetupsIndexRoute: MeetupsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/dashboard",
        "/profile",
        "/meetups/$id",
        "/meetups/new-meetup",
        "/meetups/"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/dashboard": {
      "filePath": "dashboard.jsx"
    },
    "/profile": {
      "filePath": "profile.jsx"
    },
    "/meetups/$id": {
      "filePath": "meetups/$id.jsx"
    },
    "/meetups/new-meetup": {
      "filePath": "meetups/new-meetup.jsx"
    },
    "/meetups/": {
      "filePath": "meetups/index.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
